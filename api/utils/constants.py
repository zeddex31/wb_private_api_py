# Полный список городов
cities = {
    "-364001": "Москва",
    "-1187265": "Санкт-Петербург",
    "-2133462": "Казань",
    "-364763": "Новосибирск",
    "-5803327": "Екатеринбург",
    "12358058": "Краснодар",
    "-1785058": "Хабаровск",
    "-59249": "Минск",
    "-1275551": "Москва Центр",
    "-445284": "Москва Север",
    "123585704": "Москва Запад",
    "123589330": "Москва ЮГ",
    "123586098": "Москва Восток",
    "-5817686": "Рязань",
    "-3390498": "Воронеж",
    "-3351953": "Ярославль",
    "12358461": "Саратов",
    "-284542": "Самара",
    "12358495": "Уфа",
    "12358536": "Нижний Новгород",
    "12358361": "Пермь",
    "-4039473": "Волгоград",
    "-2227685": "Ростов-на-Дону",
    "-5921134": "Махачкала",
    "123585969": "Магнитогорск",
    "12358470": "Тюмень",
    "-1579833": "Челябинск",
    "-3902910": "Омск",
    "12356481": "Красноярск",
    "123587791": "Владивосток",
    "-5827722": "Иркутск"
}

# Словарь складов (warehouses)
warehouses = {
    # Официальные склады Wildberries
    507: "Коледино WB",
    686: "Новосибирск WB",
    1193: "Хабаровск WB",
    1733: "Екатеринбург WB",
    2737: "Уткина Заводь WB",
    117442: "Калуга WB",
    117501: "Подольск WB",
    117866: "Тамбов WB",
    117986: "Казань WB",
    120762: "Электросталь WB",
    121709: "Электросталь WB",
    130744: "Краснодар WB",
    159402: "Шушары WB",
    161812: "Санкт-Петербург WB",
    172430: "Барнаул WB",
    204615: "Томск WB",
    204939: "Астана WB",
    205104: "Ульяновск WB",
    205205: "Киров WB",
    205228: "Белая дача WB",
    206236: "Белые Столбы WB",
    206348: "Алексин WB",
    206708: "Новокузнецк WB",
    206844: "Калининград WB",
    206968: "Новосёлки WB",
    208277: "Невинномысск WB",
    208941: "Домодедово WB",
    209513: "Домодедово WB",
    210001: "Новосёлки-2 WB",
    210515: "Вёшки WB",

    # Склады продавцов (Дропшиппинг)
    208768: "Склад продавца: Абакан",
    209649: "Склад продавца: Алексин",
    208769: "Склад продавца: Алматы",
    212038: "Склад продавца: Алматы-2",
    209902: "Склад продавца: Артём",
    214110: "Склад продавца: Архангельск",
    122495: "Склад продавца: Астана",
    204492: "Склад продавца: Астрахань",
    204493: "Склад продавца: Барнаул",
    206239: "Склад продавца: Белая Дача (Москва)",
    213892: "Склад продавца: Белгород",
    214112: "Склад продавца: Белогорск",
    209112: "Склад продавца: Белые Столбы",
    208814: "Склад продавца: Бишкек",
    204494: "Склад продавца: Брянск",
    204495: "Склад продавца: Владикавказ",
    117392: "Склад продавца: Владимир",
    152588: "Склад продавца: Волгоград",
    204496: "Склад продавца: Вологда",
    211895: "Склад продавца: Воронеж",
    209111: "Склад продавца: Гольяново (Москва)",
    208771: "Склад продавца: Гомель (Беларусь)",
    210967: "Склад продавца: Домодедово",
    208815: "Склад продавца: Екатеринбург",
    211790: "Склад продавца: Екатеринбург-2",
    208816: "Склад продавца: Ереван",
    208772: "Склад продавца: Иваново",
    172073: "Склад продавца: Ижевск",
    131643: "Склад продавца: Иркутск",
    208817: "Склад продавца: Казань",
    208761: "Склад продавца: Калининград",
    144046: "Склад продавца: Калуга",
    208773: "Склад продавца: Киров",
    119261: "Склад продавца: Коледино",
    209109: "Склад продавца: Комсомольский (Москва)",
    208818: "Склад продавца: Краснодар",
    118365: "Склад продавца: Красноярск",
    208774: "Склад продавца: Крыловская (Краснодар)",
    172075: "Склад продавца: Курск",
    209108: "Склад продавца: Курьяновская (Москва)",
    208776: "Склад продавца: Липецк",
    168826: "Склад продавца: Лобня (Москва)",
    121700: "Склад продавца: Минск",
    211672: "Склад продавца: Минск-2",
    212032: "Склад продавца: Вешки",
    211730: "Склад продавца: Внуково",
    117673: "Склад продавца: Москва",
    122259: "Склад продавца: Москва",
    208777: "Склад продавца: Мурманск",
    208778: "Склад продавца: Набережные Челны",
    209107: "Склад продавца: Нахабино (Москва)",
    209601: "Склад продавца: Невинномысск",
    118535: "Склад продавца: Нижний Новгород",
    213651: "Склад продавца: Нижний Тагил",
    208789: "Склад продавца: Новокузнецк",
    117419: "Склад продавца: Новосибирск",
    209591: "Склад продавца: Омск",
    208780: "Склад продавца: Оренбург",
    157848: "Склад продавца: Пенза",
    209592: "Склад продавца: Пермь",
    208781: "Склад продавца: Печатники",
    214111: "Склад продавца: Псков",
    208782: "Склад продавца: Пушкино (Москва)",
    204497: "Склад продавца: Пятигорск",
    118019: "Склад продавца: Ростов-на-Дону",
    152594: "Склад продавца: Рязань",
    146666: "Склад продавца: Самара",
    132043: "Склад продавца: Санкт-Петербург",
    117414: "Склад продавца: Санкт-Петербург (Уткина Заводь)",
    208819: "Склад продавца: Санкт-Петербург (Шушары)",
    158929: "Склад продавца: Саратов",
    204498: "Склад продавца: Серов",
    144154: "Склад продавца: Симферополь",
    208783: "Склад продавца: Смоленск",
    204212: "Склад продавца: Солнцево",
    158448: "Склад продавца: Ставрополь",
    208784: "Склад продавца: Сургут",
    115651: "Склад продавца: Тамбов",
    152610: "Склад продавца: Тверь",
    208785: "Склад продавца: Темрюк (Краснодарский край)",
    208786: "Склад продавца: Томск",
    146725: "Склад продавца: Тюмень",
    209950: "Склад продавца: Ульяновск",
    152700: "Склад продавца: Уфа",
    208820: "Склад продавца: Хабаровск",
    210815: "Склад продавца: Хоргос",
    204499: "Склад продавца: Чебоксары",
    152611: "Склад продавца: Челябинск",
    209113: "Склад продавца: Черная грязь (Москва)",
    209106: "Склад продавца: Чертановский (Москва)",
    208787: "Склад продавца: Чита",
    209510: "Склад продавца: Электросталь",
    209110: "Склад продавца: Южные ворота (Москва)",
    152612: "Склад продавца: Ярославль"
}

# RAE регионы (без дубликатов)
rae_cities = {
    "-364001": "Москва",
    "-1187265": "Санкт-Петербург",
    "-2133462": "Казань",
    "-364763": "Новосибирск",
    "-5803327": "Екатеринбург",
    "12358058": "Краснодар",
    "-1785058": "Хабаровск",
    "-59249": "Минск"
}

# Специальная группа городов (без дубликатов, исключая основную Москву)
special_cities = {
    "-1187265": "Санкт-Петербург",
    "-2133462": "Казань",
    "-364763": "Новосибирск",
    "-5803327": "Екатеринбург",
    "12358058": "Краснодар",
    "-1785058": "Хабаровск",
    "-59249": "Минск",
    "-1275551": "Москва Центр",
    "-445284": "Москва Север",
    "123585704": "Москва Запад",
    "123589330": "Москва ЮГ",
    "123586098": "Москва Восток",
    "-5817686": "Рязань",
    "-3390498": "Воронеж",
    "-3351953": "Ярославль",
    "12358461": "Саратов",
    "-284542": "Самара",
    "12358495": "Уфа",
    "12358536": "Нижний Новгород",
    "12358361": "Пермь",
    "-4039473": "Волгоград",
    "-2227685": "Ростов-на-Дону",
    "-5921134": "Махачкала",
    "123585969": "Магнитогорск",
    "12358470": "Тюмень",
    "-1579833": "Челябинск",
    "-3902910": "Омск",
    "12356481": "Красноярск",
    "123587791": "Владивосток",
    "-5827722": "Иркутск"
}


# Функции для поиска по названию города
def get_city_id_by_name(city_name: str, city_dict: dict = cities) -> str | None:
    """
    Найти ID города по его названию

    Args:
        city_name: Название города
        city_dict: Словарь для поиска (по умолчанию cities)

    Returns:
        ID города или None, если не найден
    """
    for city_id, name in city_dict.items():
        if name.lower() == city_name.lower():
            return city_id
    return None


def get_cities_by_partial_name(partial_name: str, city_dict: dict = cities) -> dict:
    """
    Найти все города, содержащие частичное название

    Args:
        partial_name: Часть названия города
        city_dict: Словарь для поиска (по умолчанию cities)

    Returns:
        Словарь {city_id: city_name} найденных городов
    """
    result = {}
    for city_id, name in city_dict.items():
        if partial_name.lower() in name.lower():
            result[city_id] = name
    return result


def is_moscow_district(city_name: str) -> bool:
    """
    Проверить, является ли город районом Москвы

    Args:
        city_name: Название города

    Returns:
        True если это район Москвы, False иначе
    """
    return city_name.lower().startswith("москва") and city_name.lower() != "москва"


def get_warehouse_name_by_id(warehouse_id: int) -> str:
    """
    Получить название склада по его ID

    Args:
        warehouse_id: ID склада

    Returns:
        Название склада или ID как строку, если не найден
    """
    return warehouses.get(warehouse_id, f"Склад #{warehouse_id}")


def get_warehouse_id_by_name(warehouse_name: str) -> int | None:
    """
    Найти ID склада по его названию

    Args:
        warehouse_name: Название склада (полное или частичное)

    Returns:
        ID склада или None, если не найден
    """
    warehouse_name_lower = warehouse_name.lower()

    # Ищем точное совпадение
    for warehouse_id, name in warehouses.items():
        if name.lower() == warehouse_name_lower:
            return warehouse_id

    # Ищем частичное совпадение
    for warehouse_id, name in warehouses.items():
        if warehouse_name_lower in name.lower():
            return warehouse_id

    return None


def get_warehouses_by_partial_name(partial_name: str) -> dict:
    """
    Найти все склады, содержащие частичное название

    Args:
        partial_name: Часть названия склада

    Returns:
        Словарь {warehouse_id: warehouse_name} найденных складов
    """
    result = {}
    partial_name_lower = partial_name.lower()

    for warehouse_id, name in warehouses.items():
        if partial_name_lower in name.lower():
            result[warehouse_id] = name

    return result


def is_seller_warehouse(warehouse_id: int) -> bool:
    """
    Проверить, является ли склад складом продавца (дропшиппинг)

    Args:
        warehouse_id: ID склада

    Returns:
        True если это склад продавца, False если это склад WB
    """
    warehouse_name = warehouses.get(warehouse_id, "")
    return warehouse_name.startswith("Склад продавца:")


def is_wb_warehouse(warehouse_id: int) -> bool:
    """
    Проверить, является ли склад официальным складом Wildberries

    Args:
        warehouse_id: ID склада

    Returns:
        True если это склад WB, False если это склад продавца
    """
    warehouse_name = warehouses.get(warehouse_id, "")
    return warehouse_name.endswith(" WB")
